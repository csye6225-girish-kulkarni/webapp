name: Packer Build and Validate

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.6'

      - name: Install dependencies
        run: go get .

      - name: Build Go binary
        run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o webapp main.go

      - name: Copy Go binary to Packer directory
        run: |
          rm -f ./packer/webapp
          cp ./webapp ./packer/

      - name: Set environment variables
        run: |
          echo "POSTGRES_CONN_STR=${{ secrets.POSTGRES_CONN_STR }}" >> ./packer/webapp.env

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2.1.0
        with:
          version: '>= 390.0.0'

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup

      - name: Run `packer init`
        id: init
        run: "packer init ./packer/packer.pkr.hcl"

      - name: Build Packer image
        run: |
          cd ./packer
          packer build -var 'postgres_user=${{ secrets.POSTGRES_USER }}' -var 'postgres_password=${{ secrets.POSTGRES_PASSWORD }}' . > op.txt
          N_IMAGE_NAME=$(tail -1 op.txt | awk -F':' '{print $NF}' | cut -d' ' -f2)
          echo "${{ vars.STARTUP_SCRIPT }}" > startup-script.sh

          gcloud compute instance-templates create "new-webapp-template" \
              --machine-type=${{ vars.MACHINE_TYPE }} \
              --image=$N_IMAGE_NAME \
              --image-project=${{ vars.NEW_IMAGE_PROJECT_ID }}\
              --boot-disk-size=${{ vars.DISK_SIZE_GB }}GB \
              --boot-disk-type=${{ vars.DISK_TYPE }} \
              --network-interface=network=${{ vars.NETWORK }},subnet=${{ vars.SUBNET }} \
              --instance-template-region=${{ vars.REGION }} \
              --tags=${{ vars.TAGS }} \
              --no-address \
              --metadata-from-file=startup-script=startup-script.sh \
              --service-account=${{ vars.SERVICE_ACCOUNT_EMAIL }} \
              --scopes=${{ vars.SCOPES }} \
              --boot-disk-kms-key=$(gcloud secrets versions access latest --secret="vm-crypto-key-secret")

      - name: Configure Managed Instance Group
        run: |
          sleep 5
          gcloud compute instance-groups managed set-instance-template instance-group-manager \
              --template="projects/cloud-csye6225-dev/regions/us-east1/instanceTemplates/new-webapp-template" \
              --region=${{ vars.REGION }}


      - name: Deploy new instances
        run: |
          gcloud compute instance-groups managed rolling-action start-update instance-group-manager \
          --version=template="projects/cloud-csye6225-dev/regions/us-east1/instanceTemplates/new-webapp-template" \
          --region=us-east1 

      - name: Wait for update to finish
        run: |
          echo $(gcloud compute instance-groups managed wait-until --stable instance-group-manager --region=us-east1) || exit 1
