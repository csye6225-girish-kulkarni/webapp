name: Packer Build and Validate

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.6'

      - name: Install dependencies
        run: go get .

      - name: Build Go binary
        run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o webapp main.go

      - name: Copy Go binary to Packer directory
        run: |
          rm -f ./packer/webapp
          cp ./webapp ./packer/

      - name : Set environment variables
        run: |
          echo "POSTGRES_CONN_STR=${{ secrets.POSTGRES_CONN_STR }}" >> ./packer/webapp.env

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2.1.0
        with:
          version: '>= 390.0.0'

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup

      - name: Run `packer init`
        id: init
        run: "packer init ./packer/packer.pkr.hcl"

#      - name: Build Packer image
#        run: |
#          cd ./packer
#          IMAGE_NAME=$(packer build -var 'postgres_user=${{ secrets.POSTGRES_USER }}' -var 'postgres_password=${{ secrets.POSTGRES_PASSWORD }}' . | grep 'A disk image was created:' | awk '{print $NF}')
#          echo $IMAGE_NAME > scripts/image_name.txt
#          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Create startup-script.sh
        run: |
          echo "${{ env.STARTUP_SCRIPT }}" > startup-script.sh

      - name: Deployment
        run: |
          echo ${{ vars.NEW_IMAGE_PROJECT_ID }}
          gcloud compute instance-templates create "new-webapp-template" \
              --machine-type=${{ vars.MACHINE_TYPE }} \
              --image=webapp-image-20240402234336 \
              --image-project=${{ vars.NEW_IMAGE_PROJECT_ID }}\
              --boot-disk-size=${{ vars.DISK_SIZE_GB }}GB \
              --boot-disk-type=${{ vars.DISK_TYPE }} \
              --network-interface=network=${{ vars.NETWORK }},subnet=${{ vars.SUBNET }} \
              --instance-template-region=${{ vars.REGION }} \
              --tags=${{ vars.TAGS }} \
              --no-address \
              --metadata-from-file=startup-script=startup-script.sh \
              --service-account=${{ vars.SERVICE_ACCOUNT_EMAIL }} \
              --scopes=${{ vars.SCOPES }}
          
      - name: Configure Managed Instance Group
        run: |
          sleep 10
          gcloud compute instance-groups managed set-instance-template instance-group-manager \
              --template="projects/cloud-csye6225-dev/regions/us-east1/instanceTemplates/new-webapp-template" \
              --region=${{ vars.REGION }}
            

      - name: Rolling Update
        run: |
          OPERATION_ID=$(gcloud compute instance-groups managed rolling-action start-update instance-group-manager \
               --version template=projects/cloud-csye6225-dev/regions/us-east1/instanceTemplates/new-webapp-template \
               --region=${{ vars.REGION }} \
               --max-unavailable=0 \
               --max-surge=1 \
               --async \
               --format="value(name)")
               
          STATUS="RUNNING"
          while [ "$STATUS" != "DONE" ]
          do
            sleep 10
            STATUS=$(gcloud compute operations describe "$OPERATION_ID" --region=${{ vars.REGION }} --format="value(status)")
          done
          if [ "$STATUS" != "DONE" ]
            then
               exit 1
          fi
